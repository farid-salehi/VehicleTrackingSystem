// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SevenPeaksSoftware.VehicleTracking.Infrastructure;

namespace SevenPeaksSoftware.VehicleTracking.Infrastructure.Migrations
{
    [DbContext(typeof(VehicleTrackingDbContext))]
    [Migration("20200130105426_V2020_01_30_1424")]
    partial class V2020_01_30_1424
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.HasKey("RoleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoleId", "IsDeleted")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(320)
                        .HasDefaultValue("");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(512);

                    b.Property<byte[]>("Salt");

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedDateTime", "IsDeleted")
                        .IsUnique();

                    b.HasIndex("UserId", "IsDeleted")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("Username", "IsDeleted");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.UserRoleModel", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RoleId");

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("UserRoleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.VehicleModel", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(512);

                    b.Property<byte[]>("Salt");

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("VehicleId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CreatedDateTime");

                    b.HasIndex("CreatedDateTime", "IsDeleted")
                        .IsUnique();

                    b.HasIndex("VehicleId", "IsDeleted")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("VehicleRegistrationNumber", "IsDeleted");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.VehicleTrackModel", b =>
                {
                    b.Property<long>("VehicleTrackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitudes");

                    b.Property<DateTimeOffset>("UpdatedDateTime");

                    b.Property<int>("VehicleId");

                    b.HasKey("VehicleTrackId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleTracks");
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.UserRoleModel", b =>
                {
                    b.HasOne("SevenPeaksSoftware.VehicleTracking.Domain.Models.RoleModel", "RoleInfo")
                        .WithMany("UserRoleList")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SevenPeaksSoftware.VehicleTracking.Domain.Models.UserModel", "UserInfo")
                        .WithMany("UserRoleList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SevenPeaksSoftware.VehicleTracking.Domain.Models.VehicleTrackModel", b =>
                {
                    b.HasOne("SevenPeaksSoftware.VehicleTracking.Domain.Models.VehicleModel", "VehicleInfo")
                        .WithMany("VehicleTrackList")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
